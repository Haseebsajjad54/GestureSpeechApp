import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:untitled/services/apiService.dart';
import 'package:untitled/services/gesture_service.dart';
import 'package:permission_handler/permission_handler.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await [
    Permission.bluetooth,
    Permission.bluetoothScan,
    Permission.bluetoothConnect,
    Permission.locationWhenInUse,
  ].request();

  // // ===== Step 1: SmartConfig WiFi setup (optional) =====
  // final info = NetworkInfo();
  // final ssid = await info.getWifiName();
  // final bssid = await info.getWifiBSSID();
  //
  // print("üì∂ SSID: $ssid, BSSID: $bssid");
  //
  // final provisioner = Provisioner.espTouch();
  //
  // provisioner.listen((response) {
  //   print("‚úÖ Device ${response.bssid} connected to WiFi!");
  // });
  //
  // try {
  //   await provisioner.start(
  //     ProvisioningRequest.fromStrings(
  //       ssid: ssid ?? "",
  //       bssid: bssid ?? "",
  //       password: "123456789", // hotspot password
  //     ),
  //   );
  //
  //   // Wait a bit for ESPs to connect
  //   await Future.delayed(const Duration(seconds: 10));
  // } catch (e) {
  //   print("‚ö† SmartConfig failed: $e");
  // } finally {
  //   await provisioner.stop();
  // }

  // ===== Step 2: Gesture Service Setup (BLE or WiFi) =====
  final gestureService = GestureService();

  // Uncomment if using WiFi sockets instead of BLE
  // await gestureService.connectToESP(
  //   lhIp: "192.168.4.10",
  //   rhIp: "192.168.4.11",
  // );

  // BLE connect
  // await gestureService.startScanAndConnect();

  if (gestureService.areBothConnected) {
    print("‚úÖ Both gloves ready! Starting gesture recording...");
    final result = await gestureService.recordGesture();
    print("Result: $result");
  } else if (gestureService.isLHConnected) {
    print("‚úÖ Left hand connected only.");
  } else if (gestureService.isRHConnected) {
    print("‚úÖ Right hand connected only.");
  } else {
    print("‚ùå No gloves connected.");
  }

  // ===== Step 3: Run App =====
  runApp(const MyApp());
}


class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'ESP32 Connection App',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const PredictionScreen(),
    );
  }
}

class PredictionScreen extends StatefulWidget {
  const PredictionScreen({super.key});

  @override
  State<PredictionScreen> createState() => _PredictionScreenState();
}

class _PredictionScreenState extends State<PredictionScreen> {
  final ApiService apiService = ApiService();
  String result = "No response yet";

  final flutterTts = FlutterTts();

  Future<void> speakText(String text) async {
    await flutterTts.setLanguage("ur-PK");
    await flutterTts.setPitch(1.0);
    await flutterTts.speak(text);
  }

  Future<void> _sendRequest() async {
    try {
      // example request
      final  data = [
        [210, 224, 203, 212, 255, 0.6, -1.01, -1.21, 9.09, -0.03, 4.5,
          179, 231, 236, 205, 255, 0.39, -0.85, -1.11, -5.15, -0.95, 7.64,],
        [ 212, 223, 201, 212, 255, 0.55, -0.88, -1.19, 8.58, 0.12, 4.38,
          179, 233, 241, 205, 255, 0.41, -0.95, -1.2, -4.41, -0.63, 7.66,],
        [212, 223, 201, 212, 255, 0.55, -0.88, -1.19, 8.58, 0.12, 4.38,
          179, 233, 241, 205, 255, 0.41, -0.95, -1.2, -4.41, -0.63, 7.66,],
        [212, 223, 201, 212, 255, 0.55, -0.88, -1.19, 8.58, 0.12, 4.38,
          179, 233, 241, 205, 255, 0.41, -0.95, -1.2, -4.41, -0.63, 7.66,],
        [212, 213, 201, 211, 255, 0.56, -0.98, -1.18, 8.61, 0.18, 4.36,
          180, 234, 235, 205, 255, 0.41, -0.97, -1.21, -4.29, -0.74, 7.85,],
        [212, 213, 201, 211, 255, 0.56, -0.98, -1.18, 8.61, 0.18, 4.36,
          180, 234, 235, 205, 255, 0.41, -0.97, -1.21, -4.29, -0.74, 7.85,],
        [207, 219, 198, 205, 255, 0.57, -0.86, -1.16, 9.05, 0.09, 4.23,
          186, 232, 234, 206, 255, 0.33, -0.21, -0.96, -3.62, -1.01, 9.31,],
        [207, 219, 198, 205, 255, 0.53, -0.75, -1.13, 9.15, 0.22, 4.06,
          183, 232, 234, 207, 255, 1.09, -0.59, -0.54, -3.31, 0.38, 8.75,],
        [ 207, 219, 198, 205, 255, 0.53, -0.75, -1.13, 9.15, 0.22, 4.06,
          183, 232, 234, 207, 255, 1.09, -0.59, -0.54, -3.31, 0.38, 8.75,],
        [212, 223, 203, 210, 255, 0.55, -0.92, -1.17, 8.68, 0.08, 4.07,
          98, 235, 153, 199, 255, 0.56, -1.08, -0.91, 1.93, 5.86, 3.13,],
        [212, 223, 203, 210, 255, 0.55, -0.92, -1.17, 8.68, 0.08, 4.07,
          98, 235, 153, 199, 255, 0.56, -1.08, -0.91, 1.93, 5.86, 3.13,],
        [212, 223, 203, 210, 255, 0.55, -0.92, -1.17, 8.68, 0.08, 4.07,
          98, 235, 153, 199, 255, 0.56, -1.08, -0.91, 1.93, 5.86, 3.13,],
        [209, 217, 198, 207, 255, 1.82, -1.72, -2.58, 9.22, 1.59, 4.07,
          172, 236, 224, 199, 255, 2.63, 2.64, -0.74, 1.06, 6.43, 4.13,],
        [209, 217, 198, 207, 255, 1.82, -1.72, -2.58, 9.22, 1.59, 4.07,
          172, 236, 224, 199, 255, 2.63, 2.64, -0.74, 1.06, 6.43, 4.13,],
        [191, 207, 186, 189, 255, 1.03, -2.05, -1.82, 5.18, 4.07, -6.53,
          183, 235, 229, 195, 255, 0.48, 0.51, -1.28, -11.63, 8.19, 5.03,],
        [ 183, 203, 182, 180, 255, 0.76, -1.46, -1.45, 4.32, 4.64, -9.23,
          190, 235, 232, 197, 255, 0.67, 0, -1.24, -11.66, 7.82, 0.5,],
        [197, 212, 190, 188, 255, 0.96, -0.47, -2.51, 3.7, 3.52, -8.59,
          183, 233, 232, 204, 255, 1.76, -1.83, -0.24, -0.25, 4.78, -12.1,],
        [201, 216, 192, 193, 255, 0.9, -0.36, -2.42, 4.91, 3.45, -8.38,
          184, 233, 233, 204, 255, 1.84, -1.94, -0.23, -1.76, 5.07, -9.15,],
        [201, 216, 192, 193, 255, 0.9, -0.36, -2.42, 4.91, 3.45, -8.38,
          184, 233, 233, 204, 255, 1.84, -1.94, -0.23, -1.76, 5.07, -9.15,],
        [ 201, 216, 192, 192, 255, 0.8, 0.15, -2.23, 4.02, 3.46, -8.32,
          182, 237, 234, 204, 255, -0.15, -0.26, -1.94, -10.92, 6.26, -0.89]
      ];
      List<List<dynamic>> lerkihe = [
        [233, 208, 222, 241, 236, 0.56, -0.91, -1.17, 2.25, -0.24, 8.51, 198, 240, 245, 217, 255, 0.38, -0.95, -1.2, -3.85, -3, 7.47],
        [233, 208, 222, 241, 236, 0.56, -0.91, -1.17, 2.25, -0.24, 8.51, 198, 240, 245, 217, 255, 0.38, -0.95, -1.2, -3.85, -3, 7.47],
        [233, 208, 221, 241, 236, 0.55, -0.83, -1.18, 2.23, -0.23, 8.67, 199, 243, 246, 214, 255, 0.41, -0.91, -1.21, -3.91, -3.03, 7.58],
        [235, 208, 221, 241, 236, 0.55, -0.83, -1.18, 2.23, -0.23, 8.67, 199, 243, 246, 214, 255, 0.41, -0.91, -1.21, -3.91, -3.03, 7.58],
        [235, 208, 221, 241, 238, 0.55, -1.02, -1.18, 2.29, -0.16, 8.53, 190, 241, 245, 213, 255, 2.4, -1.67, -0.65, -4.21, -2.78, 11.99],
        [233, 207, 221, 241, 238, 0.55, -1.02, -1.18, 2.29, -0.16, 8.53, 190, 241, 245, 213, 255, 2.4, -1.67, -0.65, -4.21, -2.78, 11.99],
        [235, 209, 221, 240, 235, 0.56, -0.93, -1.15, 2.29, -0.25, 8.56, 165, 241, 160, 156, 255, 3.32, -1.48, 0.51, -0.63, 6.03, 2.51],
        [222, 198, 221, 240, 236, 0.55, -0.87, -1.2, 2.22, -0.24, 8.52, 144, 243, 144, 143, 255, 0.3, -0.74, -1.05, -0.74, 9.21, 2.83],
        [233, 208, 221, 240, 236, 0.55, -0.87, -1.2, 2.22, -0.24, 8.52, 144, 243, 144, 143, 255, 0.3, -0.74, -1.05, -0.74, 9.21, 2.83],
        [221, 194, 221, 240, 236, 0.55, -0.87, -1.2, 2.22, -0.24, 8.52, 144, 243, 144, 143, 255, 0.3, -0.74, -1.05, -0.74, 9.21, 2.83],
        [235, 209, 221, 241, 237, 0.57, -0.98, -1.17, 2.17, -0.19, 8.55, 142, 246, 149, 145, 255, 0.62, -0.9, -1.51, -0.35, 9.35, 2.88],
        [236, 209, 221, 241, 237, 0.57, -0.98, -1.17, 2.17, -0.19, 8.55, 142, 246, 149, 145, 255, 0.62, -0.9, -1.51, -0.35, 9.35, 2.88],
        [232, 204, 221, 241, 236, 0.56, -0.91, -1.18, 2.25, -0.27, 8.56, 154, 245, 157, 150, 255, 0.22, -0.76, -1.15, 0.42, 7.96, 3.15],
        [237, 209, 221, 241, 236, 0.56, -0.91, -1.18, 2.25, -0.27, 8.56, 154, 245, 157, 150, 255, 0.22, -0.76, -1.15, 0.42, 7.96, 3.15],
        [234, 209, 221, 241, 236, 0.56, -0.91, -1.18, 2.25, -0.27, 8.56, 154, 245, 157, 150, 255, 0.22, -0.76, -1.15, 0.42, 7.96, 3.15],
        [236, 209, 221, 241, 235, 0.55, -0.97, -1.18, 2.17, -0.21, 8.59, 154, 244, 160, 151, 255, -0.07, -1.06, -0.98, -0.8, 9.34, 2.12],
        [236, 209, 221, 241, 235, 0.55, -0.97, -1.18, 2.17, -0.21, 8.59, 154, 244, 160, 151, 255, -0.07, -1.06, -0.98, -0.8, 9.34, 2.12],
        [236, 209, 221, 241, 235, 0.55, -0.97, -1.18, 2.17, -0.21, 8.59, 154, 244, 160, 151, 255, -0.07, -1.06, -0.98, -0.8, 9.34, 2.12],
        [237, 209, 221, 241, 238, 0.55, -0.86, -1.18, 2.25, -0.26, 8.55, 159, 243, 160, 151, 255, 0.66, -1.04, -1.29, -0.42, 8.98, 2.83],
        [234, 209, 221, 241, 238, 0.55, -0.86, -1.18, 2.25, -0.26, 8.55, 159, 243, 160, 151, 255, 0.66, -1.04, -1.29, -0.42, 8.98, 2.83]
      ];
      final keseehain = [[207, 220, 202, 210, 255, 0.56, -0.95, -1.18, 9.34, 0.72, 2.94, 177, 225, 235, 199, 236, 0.42, -0.95, -1.21, -4.11, -0.21, 7.86],
        [180, 200, 182, 189, 239, 0.56, -0.94, -1.18, 9.34, 0.78, 2.89, 177, 225, 227, 198, 235, 0.41, -0.95, -1.21, -4.08, -0.22, 7.88],
        [182, 201, 182, 189, 239, 0.56, -0.91, -1.18, 9.32, 0.74, 2.94, 177, 227, 228, 209, 235, 0.41, -0.95, -1.21, -4.06, -0.22, 7.91],
        [182, 201, 182, 189, 239, 0.56, -0.91, -1.18, 9.32, 0.74, 2.94, 177, 227, 228, 209, 235, 0.41, -0.95, -1.21, -4.06, -0.22, 7.91],
        [209, 222, 202, 210, 255, 0.56, -0.93, -1.18, 9.32, 0.73, 2.94, 176, 227, 234, 209, 235, 0.41, -0.96, -1.21, -4.07, -0.54, 7.91],
        [208, 221, 201, 210, 255, 0.54, -0.95, -1.18, 9.33, 0.79, 2.86, 176, 227, 236, 200, 235, 0.4, -0.95, -1.22, -4.07, -0.22, 7.89],
        [208, 221, 200, 210, 255, 0.56, -0.99, -1.19, 9.41, 0.78, 2.7, 176, 227, 237, 200, 235, 0.36, -0.8, -1.17, -3.89, -0.34, 8.25],
        [210, 220, 200, 209, 255, 0.33, -0.61, -1.05, 9.65, 1.22, 2.2, 144, 231, 186, 194, 235, 2.43, -1.99, 0.54, -3.08, 3.83, 4.68],
        [210, 220, 201, 209, 255, 0.28, -0.48, -1.03, 9.67, 1.33, 2.31, 123, 232, 156, 193, 211, 3.39, -2.84, 1.11, -1.83, 6.16, 3.21],
        [209, 220, 200, 209, 255, 0.9, -2.01, -1.9, 10.55, 2.28, 0.81, 135, 231, 168, 193, 214, 3.14, -1.21, 1.04, -0.7, 4.09, 4.1],
        [209, 220, 200, 210, 255, 0.7, -2.53, -1.74, 7.51, 1.92, -1.02, 151, 229, 188, 190, 221, 2.6, 2.3, -0.13, 1.4, 4.34, 3.81],
        [195, 215, 192, 202, 255, 0.4, -1.49, -1.24, 9.13, 2.94, -1.13, 162, 234, 195, 197, 229, 0.16, 1.38, -1.57, 2.38, 4.45, -2.3],
        [201, 215, 194, 202, 255, 0.68, -0.9, -1.5, 4.8, 2.82, -1.66, 169, 234, 195, 197, 230, 1.86, -0.08, 0.83, -1.42, 5.1, 4.45],
        [194, 211, 189, 179, 255, 0.71, -3.15, -1.41, 1.57, 5.28, -6.02, 190, 234, 233, 196, 230, 1.01, -1.17, -1.37, -6.43, 8.24, -12.03],
        [200, 215, 193, 183, 255, 0.56, -2.9, -1.43, 8.99, 5.31, -4.82, 186, 234, 233, 196, 231, -0.53, -0.14, -3.32, 0.11, 7.18, -18.13],
        [210, 222, 199, 181, 255, 0.5, -0.55, -1.31, 9.16, 4.91, -7.99, 205, 234, 236, 181, 185, 0.09, -1.06, -1.11, -5.38, 5.82, -5.13],
        [209, 223, 197, 184, 255, 0.77, -1.18, -0.79, 2.78, 4.82, -9.86, 198, 233, 236, 180, 210, -1.21, -0.99, -3.24, -0.43, 4.56, -11.64],
        [209, 223, 197, 184, 255, 0.77, -1.18, -0.79, 2.78, 4.82, -9.86, 198, 233, 236, 187, 235, -1.21, -0.99, -3.24, -0.43, 4.56, -11.64],
        [210, 222, 198, 185, 255, 0.74, -0.29, -0.71, 1.36, 5.35, -8.77, 191, 235, 235, 204, 255, -1.77, -2.99, -3.34, -7.34, 4.66, -2.81],
        [210, 222, 198, 187, 255, 0.28, 1.46, -1.28, 6.67, 3.5, -6, 186, 235, 237, 196, 229, -1.98, -5.31, -3.54, -7.36, 3.38, -0.38]
      ];
      final  rona = [

        [216,198,209,231,222,0.52,-0.83,-1.18,0.71,-6.07,5.04,
          218,227,236,206,255,0.37,-0.94,-1.22,-3.77,-6.09,4.62,],


        [202,180,211,232,223,0.58,-0.91,-1.17,0.35,-6.05,5.05,
          216,226,235,204,255,0.41,-0.95,-1.22,-3.78,-5.95,4.43,],

        [202,180,213,232,223,0.58,-0.88,-1.17,0.38,-6.04,5.04,
          216,227,236,204,255,0.41,-0.95,-1.21,-3.81,-5.95,4.42,],

        [216,197,213,231,222,0.56,-0.95,-1.18,0.57,-6,5.03,
          202,218,224,191,255,0.42,-0.95,-1.2,-3.86,-5.96,4.41,],

        [215,197,212,231,222,0.57,-0.99,-1.18,0.52,-6.03,5.01,
          203,217,223,189,255,1.29,-1.79,-1.53,-4.08,-6.97,5.61,],

        [215,197,212,231,222,0.57,-0.99,-1.18,0.52,-6.03,5.01,
          203,217,223,189,255,1.29,-1.79,-1.53,-4.08,-6.97,5.61,],

        [216,198,212,230,223,0.59,-1.04,-1.18,0.62,-6.01,5.11,
          225,228,194,169,255,1.39,0.47,1.41,-6.85,-2.03,3.23,],

        [216,198,212,230,223,0.57,-0.98,-1.18,0.75,-5.99,5.16,
          223,228,183,155,255,1.99,1.39,2.24,-5.88,0.73,4.63,],

        [216,198,212,230,223,0.57,-0.98,-1.18,0.75,-5.99,5.16,
          223,228,183,155,255,1.99,1.39,2.24,-5.88,0.73,4.63,],

        [215,197,211,231,222,0.57,-0.99,-1.2,0.67,-5.98,5.07,
          218,216,99,83,255,-1.99,-0.05,-1.4,-2.35,6.93,0.9,],

        [215,197,211,231,222,0.57,-0.99,-1.2,0.67,-5.98,5.07,
          218,216,99,83,255,-1.99,-0.05,-1.4,-2.35,6.93,0.9,],

        [ 202,183,198,216,204,0.57,-0.95,-1.18,0.68,-6.04,5.08,
          211,206,98,84,255,-0.32,-0.97,-1.13,-3.29,7.99,-0.58,],

        [202,183,198,216,204,0.56,-0.92,-1.18,0.63,-6.06,5.03,
          197,193,95,83,255,0.11,-0.96,-0.98,-3.16,8.47,-0.95,],

        [202,183,198,216,204,0.56,-0.92,-1.18,0.63,-6.06,5.03,
          197,193,95,83,255,0.11,-0.96,-0.98,-3.16,8.47,-0.95,],

        [215,197,212,231,223,0.55,-0.92,-1.18,0.75,-6.02,5.05,
          211,198,103,92,255,0.73,-0.85,-0.96,-4.04,8.34,1.6,],

        [215,197,211,231,223,0.56,-0.95,-1.18,0.83,-6.02,5.11,
          218,197,106,97,255,0.87,-0.84,-1.14,-4.66,7.97,2.72,],

        [215,197,211,231,223,0.56,-0.95,-1.18,0.83,-6.02,5.11,
          218,197,106,97,255,0.87,-0.84,-1.14,-4.66,7.97,2.72,],

        [215,197,212,230,222,0.57,-0.96,-1.17,0.66,-6,5.12,
          220,204,107,97,255,-0.6,-0.82,-1.47,-4.27,8.95,-0.5,],

        [215,197,212,230,222,0.57,-0.96,-1.17,0.66,-6,5.12,
          220,204,107,97,255,-0.6,-0.82,-1.47,-4.27,8.95,-0.5,],

        [215,197,212,230,222,0.56,-0.93,-1.17,0.66,-6.04,5.1,
          220,210,103,94,255,0.3,-0.55,-1.29,-4.48,8.31,0.88]

      ];

      final response = await apiService.sendPredictionRequest(lerkihe);
      print(response);
      setState(() {
        result = response!;
      });
      speakText(response!);
    } catch (e) {
      setState(() {
        result = "Error: $e";
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("ESP32 Prediction")),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(result),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _sendRequest,
              child: const Text("Send Data"),
            ),
          ],
        ),
      ),
    );
  }
}

